import numpy as np

def aam(f, grad_f, S, x0, V0):
  k = 0
  A0 = 0
  x = x0
  v = v0
  A = A0
  a = 1
  max_iter = 100
  tol = 1e-6

  for k in range(max_iter):
    beta_set = np.linspace(0,1,100)
    beta_k = beta_set [np.argmin([f(x + beta * (v - x)) for beta in beta_set])]

    y_k = x + beta_k * (v-x)

    grad_y_k = grad_f(y_k)
    i_k = np.argmax([np.linalg.norm(grad_y_k[i])**2 for i in range (grad_y_k.shape[0])])

    x_set = S[i_k](y_k)
    x_k = x_set[np.argmin([f(x) for x in x_set])]

    A_k = A + a
    a_k = a
    tol = 1e-6
    while not np.isclose(f(y_k) - (a_k ** 2) / (2 * A_k) * np.linalg.norm(grad_y_k) ** 2, f(x_k), atol=tol):
      a_k *= 0.5
    v = v - a_k * grad_y_k
    

  return x_k
