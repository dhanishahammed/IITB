import numpy as np

def aam(f, grad_f, S, x0, v0):
    A0 = 0
    x = x0
    v = v0
    A = A0
    a = 1.0
    max_iter=100
    tol=1e-6
    
    for k in range(max_iter):
        beta = np.argmin([f(x + beta * (v - x)) for beta in np.linspace(0, 1, 100)])
        y = x + beta * (v - x)
        grad_y = grad_f(y)
        i = np.argmax([np.linalg.norm(grad_y[i]) ** 2 for i in range(grad_y.shape[0])])
        x_next = np.argmin([f(x) for x in S[i](y)])
        A_next = A + a
        a_next = a
        while f(y) - (a_next ** 2) / (2 * A_next) * np.linalg.norm(grad_y) ** 2 > f(x_next):
            a_next *= 0.5
        x = x_next
        v = v - a_next * grad_y
        A = A_next
        a = a_next
        if np.linalg.norm(grad_y) < tol:
            break
    
    return x
